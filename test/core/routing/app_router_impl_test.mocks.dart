// Mocks generated by Mockito 5.4.5 from annotations
// in hr_connect/test/core/routing/app_router_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:hr_connect/core/routing/route_guards.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthenticationGuard].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationGuard extends _i1.Mock
    implements _i2.AuthenticationGuard {
  MockAuthenticationGuard() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> canNavigate(String? routeName, Object? arguments) =>
      (super.noSuchMethod(
            Invocation.method(#canNavigate, [routeName, arguments]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  String? getFallbackRoute(String? routeName, Object? arguments) =>
      (super.noSuchMethod(
            Invocation.method(#getFallbackRoute, [routeName, arguments]),
          )
          as String?);
}

/// A class which mocks [AdminGuard].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdminGuard extends _i1.Mock implements _i2.AdminGuard {
  MockAdminGuard() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> canNavigate(String? routeName, Object? arguments) =>
      (super.noSuchMethod(
            Invocation.method(#canNavigate, [routeName, arguments]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  String? getFallbackRoute(String? routeName, Object? arguments) =>
      (super.noSuchMethod(
            Invocation.method(#getFallbackRoute, [routeName, arguments]),
          )
          as String?);
}
