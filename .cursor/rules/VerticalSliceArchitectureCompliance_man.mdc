---
description: 
globs: 
alwaysApply: false
---
---
description: Enforces adherence to the Modified Vertical Slice Architecture (MVSA) for the HR Connect application
globs: "**/lib/**/*.dart"
alwaysApply: false
@verticalSliceCompliance
---

# Vertical Slice Architecture Compliance

This rule provides guidance for implementing the Modified Vertical Slice Architecture (MVSA) in the HR Connect application. It focuses on ensuring feature modules contain complete vertical slices, maintaining proper layer separation within slices, enforcing clear boundaries between features, and handling cross-cutting concerns appropriately.

## Core Principles

1. The application follows a "Core + Features" approach
2. Each feature is implemented as a complete vertical slice cutting across all layers
3. Features are organized by business capability, not technical layer
4. Common infrastructure and cross-cutting concerns are in the core module
5. Each slice maintains clean architecture principles internally

## Required Packages

```yaml
dependencies:
  # Architecture Support
  get_it: ^7.6.0           # For dependency injection
  injectable: ^2.1.2       # For DI code generation
  dartz: ^0.10.1           # For functional error handling (Either type)
  equatable: ^2.0.5        # For value objects
  
  # State Management
  riverpod: ^2.6.1         # For state management
  flutter_riverpod: ^2.6.1 # Flutter integration for Riverpod
  
  # Code Generation
  freezed_annotation: ^2.2.0  # For immutable models
  json_annotation: ^4.8.1     # For JSON serialization
  
dev_dependencies:
  # Code Generators
  build_runner: ^2.4.8        # For running code generators
  injectable_generator: ^2.1.6 # For generating DI code
  freezed: ^2.3.5             # For generating immutable models
  json_serializable: ^6.7.0    # For generating JSON serialization
```

## Project Structure

```
lib/
  ├── core/                 # Shared infrastructure
  │   ├── di/               # Dependency injection
  │   ├── error/            # Error handling
  │   ├── network/          # Network layer
  │   ├── storage/          # Local storage
  │   ├── utils/            # Utilities
  │   └── security/         # Security foundations
  │
  ├── features/             # Business capability slices
  │   ├── attendance/       # QR attendance system
  │   │   ├── domain/       # Domain layer
  │   │   │   ├── entities/ # Business entities
  │   │   │   ├── repositories/ # Repository interfaces
  │   │   │   ├── use_cases/ # Use cases / application services
  │   │   │   └── value_objects/ # Value objects
  │   │   ├── data/         # Data layer
  │   │   │   ├── datasources/ # Data sources (local/remote)
  │   │   │   ├── models/   # Data models/DTOs
  │   │   │   └── repositories/ # Repository implementations
  │   │   └── presentation/ # UI layer
  │   │       ├── pages/    # Page widgets
  │   │       ├── providers/ # State providers
  │   │       ├── widgets/  # UI components
  │   │       └── controllers/ # UI logic
  │   │
  │   ├── time_management/  # Time management feature
  │   ├── employee/         # Employee management feature
  │   └── admin/            # Admin portal features
  │
  └── main.dart             # Application entry point
```

## Vertical Slice Implementation

### Feature Slice Setup

For each new feature, follow this structure:

```dart
// file: lib/features/[feature_name]/domain/entities/[entity_name].dart
import 'package:equatable/equatable.dart';
import 'package:hr_connect/features/[feature_name]/domain/value_objects/[value_object_name].dart';

/// [Entity Description]
class EntityName extends Equatable {
  final EntityId id;
  final ValueObject1 valueObject1;
  final ValueObject2 valueObject2;
  
  const EntityName({
    required this.id,
    required this.valueObject1,
    required this.valueObject2,
  });
  
  @override
  List<Object> get props => [id, valueObject1, valueObject2];
}
```

```dart
// file: lib/features/[feature_name]/domain/repositories/[repository_name].dart
import 'package:dartz/dartz.dart';
import 'package:hr_connect/core/error/failures.dart';
import 'package:hr_connect/features/[feature_name]/domain/entities/[entity_name].dart';

/// Repository interface for [repository description]
abstract class RepositoryName {
  /// [Method description]
  Future<Either<Failure, EntityName>> methodName(Param param);
  
  /// [Method description]
  Future<Either<Failure, List<EntityName>>> getEntities();
}
```

```dart
// file: lib/features/[feature_name]/domain/use_cases/[use_case_name].dart
import 'package:dartz/dartz.dart';
import 'package:hr_connect/core/error/failures.dart';
import 'package:hr_connect/features/[feature_name]/domain/entities/[entity_name].dart';
import 'package:hr_connect/features/[feature_name]/domain/repositories/[repository_name].dart';
import 'package:injectable/injectable.dart';

/// [Use case description]
@injectable
class UseCaseName {
  final RepositoryName repository;
  
  UseCaseName(this.repository);
  
  /// Executes the use case
  Future<Either<Failure, EntityName>> call(Param param) {
    return repository.methodName(param);
  }
}
```

### Domain Layer

The domain layer should be completely independent of other layers and external frameworks:

```dart
// file: lib/features/attendance/domain/entities/attendance_record.dart
import 'package:equatable/equatable.dart';
import 'package:hr_connect/features/attendance/domain/value_objects/attendance_id.dart';
import 'package:hr_connect/features/attendance/domain/value_objects/employee_id.dart';
import 'package:hr_connect/features/attendance/domain/value_objects/attendance_status.dart';

/// Represents an attendance record in the system
class AttendanceRecord extends Equatable {
  final AttendanceId id;
  final EmployeeId employeeId;
  final DateTime timestamp;
  final AttendanceStatus status;
  
  const AttendanceRecord({
    required this.id,
    required this.employeeId,
    required this.timestamp,
    required this.status,
  });
  
  @override
  List<Object> get props => [id, employeeId, timestamp, status];
}
```

### Data Layer

The data layer implements domain repositories and handles data sources:

```dart
// file: lib/features/attendance/data/models/attendance_record_model.dart
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:hr_connect/features/attendance/domain/entities/attendance_record.dart';
import 'package:hr_connect/features/attendance/domain/value_objects/attendance_id.dart';
import 'package:hr_connect/features/attendance/domain/value_objects/employee_id.dart';
import 'package:hr_connect/features/attendance/domain/value_objects/attendance_status.dart';

part 'attendance_record_model.freezed.dart';
part 'attendance_record_model.g.dart';

@freezed
class AttendanceRecordModel with _$AttendanceRecordModel {
  const factory AttendanceRecordModel({
    required String id,
    required String employeeId,
    required DateTime timestamp,
    required String status,
  }) = _AttendanceRecordModel;
  
  factory AttendanceRecordModel.fromJson(Map<String, dynamic> json) => 
    _$AttendanceRecordModelFromJson(json);
  
  factory AttendanceRecordModel.fromEntity(AttendanceRecord entity) {
    return AttendanceRecordModel(
      id: entity.id.value,
      employeeId: entity.employeeId.value,
      timestamp: entity.timestamp,
      status: entity.status.value,
    );
  }
}

extension AttendanceRecordModelX on AttendanceRecordModel {
  AttendanceRecord toEntity() {
    return AttendanceRecord(
      id: AttendanceId(id),
      employeeId: EmployeeId(employeeId),
      timestamp: timestamp,
      status: AttendanceStatus.fromString(status),
    );
  }
}
```

```dart
// file: lib/features/attendance/data/repositories/attendance_repository_impl.dart
import 'package:dartz/dartz.dart';
import 'package:hr_connect/core/error/exceptions.dart';
import 'package:hr_connect/core/error/failures.dart';
import 'package:hr_connect/core/network/network_info.dart';
import 'package:hr_connect/features/attendance/data/datasources/attendance_local_data_source.dart';
import 'package:hr_connect/features/attendance/data/datasources/attendance_remote_data_source.dart';
import 'package:hr_connect/features/attendance/domain/entities/attendance_record.dart';
import 'package:hr_connect/features/attendance/domain/repositories/attendance_repository.dart';
import 'package:injectable/injectable.dart';

@Injectable(as: AttendanceRepository)
class AttendanceRepositoryImpl implements AttendanceRepository {
  final AttendanceLocalDataSource localDataSource;
  final AttendanceRemoteDataSource remoteDataSource;
  final NetworkInfo networkInfo;
  
  AttendanceRepositoryImpl({
    required this.localDataSource,
    required this.remoteDataSource,
    required this.networkInfo,
  });
  
  @override
  Future<Either<Failure, AttendanceRecord>> getAttendanceRecord(String id) async {
    try {
      // Try to get from local cache first
      final localRecord = await localDataSource.getAttendanceRecord(id);
      
      // If online, try to get fresh data and update cache
      if (await networkInfo.isConnected) {
        try {
          final remoteRecord = await remoteDataSource.getAttendanceRecord(id);
          await localDataSource.cacheAttendanceRecord(remoteRecord);
          return Right(remoteRecord.toEntity());
        } on ServerException {
          return Right(localRecord.toEntity());
        }
      }
      
      return Right(localRecord.toEntity());
    } on CacheException {
      if (await networkInfo.isConnected) {
        try {
          final remoteRecord = await remoteDataSource.getAttendanceRecord(id);
          await localDataSource.cacheAttendanceRecord(remoteRecord);
          return Right(remoteRecord.toEntity());
        } on ServerException {
          return Left(ServerFailure());
        }
      }
      return Left(CacheFailure());
    }
  }
  
  @override
  Future<Either<Failure, List<AttendanceRecord>>> getAttendanceRecords(String employeeId) async {
    // Implementation similar to the above, but for a list
    // ...
  }
}
```

### Presentation Layer

The presentation layer uses Riverpod for state management:

```dart
// file: lib/features/attendance/presentation/providers/attendance_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hr_connect/core/di/injection.dart';
import 'package:hr_connect/features/attendance/domain/entities/attendance_record.dart';
import 'package:hr_connect/features/attendance/domain/use_cases/get_attendance_records.dart';

final attendanceProvider = FutureProvider.family<List<AttendanceRecord>, String>(
  (ref, employeeId) async {
    final getAttendanceRecords = getIt<GetAttendanceRecords>();
    final result = await getAttendanceRecords(employeeId);
    
    return result.fold(
      (failure) => throw Exception('Failed to load attendance records: $failure'),
      (records) => records,
    );
  },
);

final attendanceStateProvider = StateNotifierProvider<AttendanceNotifier, AttendanceState>(
  (ref) => AttendanceNotifier(getIt<SubmitAttendance>()),
);

class AttendanceNotifier extends StateNotifier<AttendanceState> {
  final SubmitAttendance _submitAttendance;
  
  AttendanceNotifier(this._submitAttendance) : super(AttendanceState.initial());
  
  Future<void> submitAttendance(String employeeId, String qrCode) async {
    state = state.copyWith(isSubmitting: true);
    
    final result = await _submitAttendance(SubmitAttendanceParams(
      employeeId: employeeId,
      qrCode: qrCode,
    ));
    
    result.fold(
      (failure) => state = state.copyWith(
        isSubmitting: false,
        error: failure.toString(),
      ),
      (record) => state = state.copyWith(
        isSubmitting: false,
        lastSubmittedRecord: record,
        error: null,
      ),
    );
  }
}

// Using freezed for state classes
@freezed
class AttendanceState with _$AttendanceState {
  const factory AttendanceState({
    required bool isSubmitting,
    AttendanceRecord? lastSubmittedRecord,
    String? error,
  }) = _AttendanceState;
  
  factory AttendanceState.initial() => const AttendanceState(
    isSubmitting: false,
  );
}
```

```dart
// file: lib/features/attendance/presentation/pages/attendance_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hr_connect/features/attendance/presentation/providers/attendance_provider.dart';
import 'package:hr_connect/features/attendance/presentation/widgets/qr_scanner_widget.dart';

class AttendancePage extends ConsumerWidget {
  final String employeeId;
  
  const AttendancePage({Key? key, required this.employeeId}) : super(key: key);
  
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final attendanceAsync = ref.watch(attendanceProvider(employeeId));
    final attendanceState = ref.watch(attendanceStateProvider);
    
    return Scaffold(
      appBar: AppBar(title: const Text('Attendance')),
      body: Column(
        children: [
          // QR Scanner
          Expanded(
            flex: 2,
            child: QrScannerWidget(
              onQrDetected: (qrCode) {
                ref.read(attendanceStateProvider.notifier).submitAttendance(
                  employeeId,
                  qrCode,
                );
              },
            ),
          ),
          
          // Status
          if (attendanceState.isSubmitting)
            const Center(child: CircularProgressIndicator()),
          
          if (attendanceState.error != null)
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                attendanceState.error!,
                style: TextStyle(color: Colors.red),
              ),
            ),
          
          if (attendanceState.lastSubmittedRecord != null)
            AttendanceConfirmationWidget(
              record: attendanceState.lastSubmittedRecord!,
            ),
          
          // Attendance History
          Expanded(
            flex: 3,
            child: attendanceAsync.when(
              data: (records) => ListView.builder(
                itemCount: records.length,
                itemBuilder: (context, index) => AttendanceListItem(
                  record: records[index],
                ),
              ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, stack) => Center(
                child: Text('Error: ${error.toString()}'),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
```

## Dependency Injection Setup

The DI setup for MVSA should be organized by feature:

```dart
// file: lib/core/di/injection.dart
import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';
import 'injection.config.dart';

final getIt = GetIt.instance;

@InjectableInit(
  initializerName: 'init', // default
  preferRelativeImports: true, // default
  asExtension: false, // default
)
void configureDependencies() => init(getIt);
```

```dart
// file: lib/features/attendance/di/attendance_module.dart
import 'package:injectable/injectable.dart';
import 'package:hr_connect/core/di/injection.dart';
import 'package:hr_connect/features/attendance/data/datasources/attendance_local_data_source.dart';
import 'package:hr_connect/features/attendance/data/datasources/attendance_remote_data_source.dart';
import 'package:hr_connect/features/attendance/data/repositories/attendance_repository_impl.dart';
import 'package:hr_connect/features/attendance/domain/repositories/attendance_repository.dart';

@module
abstract class AttendanceModule {
  @lazySingleton
  AttendanceLocalDataSource get attendanceLocalDataSource => 
      AttendanceLocalDataSourceImpl(database: getIt());
  
  @lazySingleton
  AttendanceRemoteDataSource get attendanceRemoteDataSource => 
      AttendanceRemoteDataSourceImpl(client: getIt());
  
  @LazySingleton(as: AttendanceRepository)
  AttendanceRepositoryImpl get attendanceRepository => AttendanceRepositoryImpl(
    localDataSource: getIt(),
    remoteDataSource: getIt(),
    networkInfo: getIt(),
  );
}
```

## Feature Registration

Each feature should be registered in the main app:

```dart
// file: lib/main.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hr_connect/core/di/injection.dart';
import 'package:hr_connect/features/attendance/di/attendance_module.dart';
import 'package:hr_connect/features/time_management/di/time_management_module.dart';
// Import other feature modules

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  configureDependencies();
  runApp(const ProviderScope(child: HrConnectApp()));
}

class HrConnectApp extends StatelessWidget {
  const HrConnectApp({Key? key}) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'HR Connect',
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
      ),
      home: const LoginPage(),
    );
  }
}
```

## Cross-Cutting Concerns

Handle cross-cutting concerns in the core module:

```dart
// file: lib/core/error/failures.dart
import 'package:equatable/equatable.dart';

abstract class Failure extends Equatable {
  final String message;
  
  const Failure([this.message = '']);
  
  @override
  List<Object> get props => [message];
}

class ServerFailure extends Failure {
  const ServerFailure([String message = 'Server error']) : super(message);
}

class CacheFailure extends Failure {
  const CacheFailure([String message = 'Cache error']) : super(message);
}

class NetworkFailure extends Failure {
  const NetworkFailure([String message = 'Network error']) : super(message);
}

class ValidationFailure extends Failure {
  const ValidationFailure([String message = 'Validation error']) : super(message);
}
```

```dart
// file: lib/core/network/network_info.dart
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:injectable/injectable.dart';

abstract class NetworkInfo {
  Future<bool> get isConnected;
}

@LazySingleton(as: NetworkInfo)
class NetworkInfoImpl implements NetworkInfo {
  final Connectivity connectivity;
  
  NetworkInfoImpl(this.connectivity);
  
  @override
  Future<bool> get isConnected async {
    final connectivityResult = await connectivity.checkConnectivity();
    return connectivityResult != ConnectivityResult.none;
  }
}
```

## Business Rules for MVSA Implementation

1. **Feature Organization**
   - Features should be organized by business capability (e.g., Attendance, TimeManagement)
   - Each feature should contain its own domain, data, and presentation layers
   - Cross-cutting concerns should be in the core module
   - Feature modules should not depend on each other directly

2. **Layer Separation**
   - Domain layer must not have dependencies on data or presentation layers
   - Data layer must only depend on domain layer for interfaces
   - Presentation layer may depend on domain layer but not data layer
   - Use proper abstraction through interfaces and dependency injection

3. **Feature Communication**
   - Features should communicate through well-defined interfaces
   - Use provider/service pattern for cross-feature communication
   - Shared entities should be defined in the domain layer
   - Avoid tight coupling between features

4. **Clean Architecture Principles**
   - Domain entities should be plain Dart objects with no framework dependencies
   - Use cases should handle one specific task
   - Repositories should abstract data access
   - Dependency inversion through interfaces and DI

5. **Testing Organization**
   - Tests should follow the same structure as the application
   - Unit tests should verify individual components
   - Integration tests should verify interactions between layers
   - Feature tests should validate complete user flows

## Testing Approach

```dart
// file: test/features/attendance/domain/use_cases/submit_attendance_test.dart
import 'package:dartz/dartz.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:hr_connect/features/attendance/domain/entities/attendance_record.dart';
import 'package:hr_connect/features/attendance/domain/repositories/attendance_repository.dart';
import 'package:hr_connect/features/attendance/domain/use_cases/submit_attendance.dart';
import 'package:hr_connect/features/attendance/domain/value_objects/attendance_id.dart';
import 'package:hr_connect/features/attendance/domain/value_objects/employee_id.dart';
import 'package:hr_connect/features/attendance/domain/value_objects/attendance_status.dart';

class MockAttendanceRepository extends Mock implements AttendanceRepository {}

void main() {
  late SubmitAttendance useCase;
  late MockAttendanceRepository mockRepository;

  setUp(() {
    mockRepository = MockAttendanceRepository();
    useCase = SubmitAttendance(mockRepository);
  });

  test('should submit attendance record', () async {
    // Arrange
    final params = SubmitAttendanceParams(
      employeeId: 'employee1',
      qrCode: 'qr123',
    );
    
    final expectedRecord = AttendanceRecord(
      id: AttendanceId('attendance1'),
      employeeId: EmployeeId('employee1'),
      timestamp: DateTime.now(),
      status: AttendanceStatus.onTime(),
    );
    
    when(mockRepository.submitAttendance(any, any))
        .thenAnswer((_) async => Right(expectedRecord));
    
    // Act
    final result = await useCase(params);
    
    // Assert
    expect(result, Right(expectedRecord));
    verify(mockRepository.submitAttendance(params.employeeId, params.qrCode));
    verifyNoMoreInteractions(mockRepository);
  });
}
```

```dart
// file: test/features/attendance/data/repositories/attendance_repository_impl_test.dart
import 'package:dartz/dartz.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:hr_connect/core/error/exceptions.dart';
import 'package:hr_connect/core/error/failures.dart';
import 'package:hr_connect/core/network/network_info.dart';
import 'package:hr_connect/features/attendance/data/datasources/attendance_local_data_source.dart';
import 'package:hr_connect/features/attendance/data/datasources/attendance_remote_data_source.dart';
import 'package:hr_connect/features/attendance/data/models/attendance_record_model.dart';
import 'package:hr_connect/features/attendance/data/repositories/attendance_repository_impl.dart';
import 'package:hr_connect/features/attendance/domain/entities/attendance_record.dart';

class MockLocalDataSource extends Mock implements AttendanceLocalDataSource {}
class MockRemoteDataSource extends Mock implements AttendanceRemoteDataSource {}
class MockNetworkInfo extends Mock implements NetworkInfo {}

void main() {
  late AttendanceRepositoryImpl repository;
  late MockLocalDataSource mockLocalDataSource;
  late MockRemoteDataSource mockRemoteDataSource;
  late MockNetworkInfo mockNetworkInfo;

  setUp(() {
    mockLocalDataSource = MockLocalDataSource();
    mockRemoteDataSource = MockRemoteDataSource();
    mockNetworkInfo = MockNetworkInfo();
    repository = AttendanceRepositoryImpl(
      localDataSource: mockLocalDataSource,
      remoteDataSource: mockRemoteDataSource,
      networkInfo: mockNetworkInfo,
    );
  });

  group('getAttendanceRecord', () {
    test('should return cached data when available and device is offline', () async {
      // Arrange
      const recordId = 'attendance1';
      final cachedModel = AttendanceRecordModel(
        id: recordId,
        employeeId: 'employee1',
        timestamp: DateTime.now(),
        status: 'ON_TIME',
      );
      
      when(mockNetworkInfo.isConnected).thenAnswer((_) async => false);
      when(mockLocalDataSource.getAttendanceRecord(recordId))
          .thenAnswer((_) async => cachedModel);
      
      // Act
      final result = await repository.getAttendanceRecord(recordId);
      
      // Assert
      verify(mockLocalDataSource.getAttendanceRecord(recordId));
      expect(result, Right<Failure, AttendanceRecord>(cachedModel.toEntity()));
    });
    
    // More tests for other scenarios...
  });
}
```

```dart
// file: test/features/attendance/presentation/providers/attendance_provider_test.dart
import 'package:dartz/dartz.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:hr_connect/features/attendance/domain/entities/attendance_record.dart';
import 'package:hr_connect/features/attendance/domain/use_cases/submit_attendance.dart';
import 'package:hr_connect/features/attendance/presentation/providers/attendance_provider.dart';

class MockSubmitAttendance extends Mock implements SubmitAttendance {}

void main() {
  late MockSubmitAttendance mockSubmitAttendance;
  late ProviderContainer container;

  setUp(() {
    mockSubmitAttendance = MockSubmitAttendance();
    
    container = ProviderContainer(
      overrides: [
        attendanceStateProvider.overrideWith(
          (ref) => AttendanceNotifier(mockSubmitAttendance),
        ),
      ],
    );
  });

  tearDown(() {
    container.dispose();
  });

  test('initial state should be not submitting', () {
    final state = container.read(attendanceStateProvider);
    expect(state.isSubmitting, false);
    expect(state.lastSubmittedRecord, null);
    expect(state.error, null);
  });

  test('submitAttendance should update state correctly on success', () async {
    // Arrange
    const employeeId = 'employee1';
    const qrCode = 'qr123';
    final record = AttendanceRecord(/* ... */);
    
    when(mockSubmitAttendance(any))
        .thenAnswer((_) async => Right(record));
    
    // Act
    container.read(attendanceStateProvider.notifier).submitAttendance(
      employeeId,
      qrCode,
    );
    
    // First state change - submitting
    var state = container.read(attendanceStateProvider);
    expect(state.isSubmitting, true);
    
    // Wait for operation to complete
    await Future.delayed(Duration.zero);
    
    // Final state - success
    state = container.read(attendanceStateProvider);
    expect(state.isSubmitting, false);
    expect(state.lastSubmittedRecord, record);
    expect(state.error, null);
  });
}
```

## Implementation Best Practices

1. **Ensure Clear Separation**
   - Keep domain layer free of framework dependencies
   - Use interfaces to define contracts between layers
   - Implement explicit dependency injection
   - Avoid importing a feature's internal components in another feature

2. **Maintain Feature Cohesion**
   - Group related functionality within a feature slice
   - Organize files by business capability, not technical concern
   - Keep feature-specific components inside the feature folder
   - Avoid duplicating domain logic across features

3. **Handle Cross-Cutting Concerns Properly**
   - Place shared infrastructure in the core module
   - Use interfaces for cross-feature communication
   - Create core services for logging, analytics, etc.
   - Apply consistent error handling across features

4. **Use Value Objects for Validation**
   - Implement self-validating value objects
   - Enforce business rules at the domain level
   - Use Either type for operation outcomes
   - Create specific failure types for different errors

5. **Maintain Repository Pattern Correctly**
   - Implement repository interfaces in the domain layer
   - Keep repository implementations in the data layer
   - Handle offline-first logic in repositories

   - Use data sources for local and remote data access