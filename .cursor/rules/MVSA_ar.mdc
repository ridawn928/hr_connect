---
description: Enforces the Modified Vertical Slice Architecture (MVSA) pattern for HR Connect, ensuring proper organization of code with a Core + Features approach and clean separation of concerns.
globs: 
alwaysApply: false
---
---
description: Enforces the Modified Vertical Slice Architecture (MVSA) pattern for HR Connect, ensuring proper organization of code with a Core + Features approach and clean separation of concerns.
globs: **/*.dart
alwaysApply: false
---

# Modified Vertical Slice Architecture (MVSA)

This rule provides guidance for implementing the Modified Vertical Slice Architecture (MVSA) in HR Connect, focusing on a Core + Features approach with clean separation of concerns across domain, data, and presentation layers.

## Overview

HR Connect follows a Modified Vertical Slice Architecture with these key principles:
- **Core + Features approach**: First establish core shared infrastructure, then implement vertical slices
- **Vertical slices** for each business capability (QR Attendance, Time Management, etc.)
- **Clean Architecture principles** with clear separation of concerns
- **Aggregate pattern** for domain modeling with Employee as primary aggregate root
- **Feature independence** allowing for parallel development and clear business alignment

## Project Structure

```
lib/
  ├── core/                  # Shared infrastructure
  │   ├── di/                # Dependency injection
  │   ├── error/             # Error handling with Either type
  │   ├── network/           # Network layer with Dio
  │   ├── storage/           # Local storage with Drift
  │   ├── security/          # Authentication and encryption
  │   └── utils/             # Common utilities
  │
  ├── features/              # Business capability slices
  │   ├── attendance/        # QR attendance feature
  │   │   ├── domain/        # Domain layer (entities, repositories, use cases)
  │   │   ├── data/          # Data layer (models, repositories impl, datasources)
  │   │   └── presentation/  # UI layer (screens, widgets, state)
  │   │
  │   ├── time_management/   # Leave and request management
  │   ├── employee/          # Employee profile management
  │   ├── admin/             # Administrative portals
  │   └── authentication/    # Authentication feature
  │
  └── app.dart               # Application entry point
```

## Core Layer Implementation

The core layer contains shared infrastructure used across features:

```dart
// File: lib/core/di/injection.dart
import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';
import 'injection.config.dart';

final getIt = GetIt.instance;

@InjectableInit()
void configureDependencies() => getIt.init();
```

```dart
// File: lib/core/error/failures.dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'failures.freezed.dart';

@freezed
class Failure with _$Failure {
  const factory Failure.server([String? message]) = ServerFailure;
  const factory Failure.cache([String? message]) = CacheFailure;
  const factory Failure.network([String? message]) = NetworkFailure;
  const factory Failure.validation([String? message]) = ValidationFailure;
  const factory Failure.auth([String? message]) = AuthFailure;
  const factory Failure.unexpected([String? message]) = UnexpectedFailure;
}
```

```dart
// File: lib/core/error/either_extensions.dart
import 'package:dartz/dartz.dart';

extension EitherX<L, R> on Either<L, R> {
  R getRight() => fold((l) => throw Exception('Cannot get right value'), id);
  
  L getLeft() => fold(id, (r) => throw Exception('Cannot get left value'));
  
  Either<L, T> flatMap<T>(Either<L, T> Function(R r) f) {
    return fold(
      (l) => Left(l),
      (r) => f(r),
    );
  }
}
```

```dart
// File: lib/core/network/network_info.dart
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:internet_connection_checker/internet_connection_checker.dart';
import 'package:injectable/injectable.dart';

abstract class NetworkInfo {
  Future<bool> get isConnected;
  Stream<ConnectivityResult> get connectivityStream;
}

@LazySingleton(as: NetworkInfo)
class NetworkInfoImpl implements NetworkInfo {
  final InternetConnectionChecker connectionChecker;
  final Connectivity connectivity;

  NetworkInfoImpl(this.connectionChecker, this.connectivity);

  @override
  Future<bool> get isConnected => connectionChecker.hasConnection;

  @override
  Stream<ConnectivityResult> get connectivityStream => 
      connectivity.onConnectivityChanged;
}
```

## Feature Slice Implementation

Each feature follows a consistent vertical slice implementation with three layers:

### Domain Layer (Feature-Specific Business Logic)

```dart
// File: lib/features/attendance/domain/entities/attendance_record.dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'attendance_record.freezed.dart';

@freezed
class AttendanceRecord with _$AttendanceRecord {
  const factory AttendanceRecord({
    required String id,
    required String employeeId,
    required DateTime timestamp,
    required AttendanceType type,
    required AttendanceStatus status,
    String? deviceId,
    GeoLocation? location,
  }) = _AttendanceRecord;
}

enum AttendanceType { checkIn, checkOut }

enum AttendanceStatus { onTime, late, veryLate, halfDay, absent, approvedLeave }
```

```dart
// File: lib/features/attendance/domain/repositories/attendance_repository.dart
import 'package:dartz/dartz.dart';
import '../../../../core/error/failures.dart';
import '../entities/attendance_record.dart';

abstract class AttendanceRepository {
  Future<Either<Failure, List<AttendanceRecord>>> getAttendanceRecords(
    String employeeId,
    DateTime startDate,
    DateTime endDate,
  );
  
  Future<Either<Failure, AttendanceRecord>> submitAttendance({
    required String employeeId,
    required String branchId,
    required AttendanceType type,
    required String qrNonce,
    String? deviceId,
    GeoLocation? location,
  });
  
  Future<Either<Failure, AttendanceRecord?>> getLastAttendanceRecord(
    String employeeId,
  );
  
  Stream<AttendanceRecord> watchLatestAttendance(String employeeId);
}
```

```dart
// File: lib/features/attendance/domain/usecases/submit_attendance.dart
import 'package:dartz/dartz.dart';
import 'package:injectable/injectable.dart';
import '../../../../core/error/failures.dart';
import '../entities/attendance_record.dart';
import '../repositories/attendance_repository.dart';

@injectable
class SubmitAttendance {
  final AttendanceRepository repository;

  SubmitAttendance(this.repository);

  Future<Either<Failure, AttendanceRecord>> call({
    required String employeeId,
    required String branchId,
    required AttendanceType type,
    required String qrNonce,
    String? deviceId,
    GeoLocation? location,
  }) {
    return repository.submitAttendance(
      employeeId: employeeId,
      branchId: branchId,
      type: type,
      qrNonce: qrNonce,
      deviceId: deviceId,
      location: location,
    );
  }
}
```

### Data Layer (Repositories and Data Sources)

```dart
// File: lib/features/attendance/data/models/attendance_record_model.dart
import 'package:freezed_annotation/freezed_annotation.dart';
import '../../domain/entities/attendance_record.dart';

part 'attendance_record_model.freezed.dart';
part 'attendance_record_model.g.dart';

@freezed
class AttendanceRecordModel with _$AttendanceRecordModel {
  const factory AttendanceRecordModel({
    required String id,
    required String employeeId,
    required DateTime timestamp,
    required String type,
    required String status,
    String? deviceId,
    GeoLocationModel? location,
  }) = _AttendanceRecordModel;

  factory AttendanceRecordModel.fromJson(Map<String, dynamic> json) => 
      _$AttendanceRecordModelFromJson(json);
  
  factory AttendanceRecordModel.fromDomain(AttendanceRecord entity) {
    return AttendanceRecordModel(
      id: entity.id,
      employeeId: entity.employeeId,
      timestamp: entity.timestamp,
      type: entity.type.name,
      status: entity.status.name,
      deviceId: entity.deviceId,
      location: entity.location != null 
          ? GeoLocationModel.fromDomain(entity.location!) 
          : null,
    );
  }
}

extension AttendanceRecordModelX on AttendanceRecordModel {
  AttendanceRecord toDomain() {
    return AttendanceRecord(
      id: id,
      employeeId: employeeId,
      timestamp: timestamp,
      type: AttendanceType.values.firstWhere(
        (type) => type.name == this.type,
        orElse: () => AttendanceType.checkIn,
      ),
      status: AttendanceStatus.values.firstWhere(
        (status) => status.name == this.status,
        orElse: () => AttendanceStatus.onTime,
      ),
      deviceId: deviceId,
      location: location?.toDomain(),
    );
  }
}
```

```dart
// File: lib/features/attendance/data/datasources/attendance_local_data_source.dart
import 'package:injectable/injectable.dart';
import '../models/attendance_record_model.dart';
import '../../../../core/storage/database.dart';

abstract class AttendanceLocalDataSource {
  Future<List<AttendanceRecordModel>> getAttendanceRecords(
    String employeeId,
    DateTime startDate,
    DateTime endDate,
  );
  
  Future<void> saveAttendanceRecord(AttendanceRecordModel record);
  
  Future<AttendanceRecordModel?> getLastAttendanceRecord(String employeeId);
  
  Stream<AttendanceRecordModel> watchLatestAttendance(String employeeId);
}

@LazySingleton(as: AttendanceLocalDataSource)
class AttendanceLocalDataSourceImpl implements AttendanceLocalDataSource {
  final Database database;

  AttendanceLocalDataSourceImpl(this.database);

  @override
  Future<List<AttendanceRecordModel>> getAttendanceRecords(
    String employeeId,
    DateTime startDate,
    DateTime endDate,
  ) async {
    final entities = await database.attendanceDao.getRecordsInRange(
      employeeId, 
      startDate, 
      endDate,
    );
    
    return entities.map((e) => e.toModel()).toList();
  }
  
  // Other implementations...
}
```

```dart
// File: lib/features/attendance/data/repositories/attendance_repository_impl.dart
import 'package:dartz/dartz.dart';
import 'package:injectable/injectable.dart';
import '../../../../core/error/failures.dart';
import '../../../../core/network/network_info.dart';
import '../../domain/entities/attendance_record.dart';
import '../../domain/repositories/attendance_repository.dart';
import '../datasources/attendance_local_data_source.dart';
import '../datasources/attendance_remote_data_source.dart';
import '../models/attendance_record_model.dart';

@LazySingleton(as: AttendanceRepository)
class AttendanceRepositoryImpl implements AttendanceRepository {
  final AttendanceLocalDataSource localDataSource;
  final AttendanceRemoteDataSource remoteDataSource;
  final NetworkInfo networkInfo;

  AttendanceRepositoryImpl(
    this.localDataSource,
    this.remoteDataSource,
    this.networkInfo,
  );

  @override
  Future<Either<Failure, List<AttendanceRecord>>> getAttendanceRecords(
    String employeeId,
    DateTime startDate,
    DateTime endDate,
  ) async {
    try {
      // Get from local cache first (offline-first)
      final localRecords = await localDataSource.getAttendanceRecords(
        employeeId,
        startDate,
        endDate,
      );
      
      // If online, try to get fresh data and update cache
      if (await networkInfo.isConnected) {
        try {
          final remoteRecords = await remoteDataSource.getAttendanceRecords(
            employeeId,
            startDate,
            endDate,
          );
          
          // Save all remote records to local database
          for (final record in remoteRecords) {
            await localDataSource.saveAttendanceRecord(record);
          }
          
          return Right(remoteRecords.map((model) => model.toDomain()).toList());
        } catch (e) {
          // If remote fetch fails, return cached data
          return Right(localRecords.map((model) => model.toDomain()).toList());
        }
      }
      
      // If offline, return cached data
      return Right(localRecords.map((model) => model.toDomain()).toList());
    } catch (e) {
      return Left(CacheFailure(e.toString()));
    }
  }
  
  // Other implementations...
}
```

### Presentation Layer (UI and State Management)

```dart
// File: lib/features/attendance/presentation/providers/attendance_providers.dart
import 'package:riverpod_annotation/riverpod_annotation.dart';
import '../../domain/entities/attendance_record.dart';
import '../../domain/usecases/get_attendance_records.dart';
import '../../domain/usecases/submit_attendance.dart';

part 'attendance_providers.g.dart';

@riverpod
Future<List<AttendanceRecord>> userAttendance(
  UserAttendanceRef ref, 
  String userId,
) async {
  final usecase = ref.watch(getAttendanceRecordsProvider);
  
  // Get today's attendance
  final today = DateTime.now();
  final startDate = DateTime(today.year, today.month, today.day);
  final endDate = startDate.add(const Duration(days: 1));
  
  final result = await usecase(
    employeeId: userId,
    startDate: startDate,
    endDate: endDate,
  );
  
  return result.fold(
    (failure) => throw Exception(failure.toString()),
    (records) => records,
  );
}

@riverpod
class AttendanceController extends _$AttendanceController {
  @override
  FutureOr<void> build() {
    // Initial state
  }
  
  Future<void> submitAttendance({
    required String employeeId,
    required String branchId,
    required AttendanceType type,
    required String qrNonce,
    String? deviceId,
    GeoLocation? location,
  }) async {
    state = const AsyncValue.loading();
    
    final usecase = ref.read(submitAttendanceProvider);
    
    final result = await usecase(
      employeeId: employeeId,
      branchId: branchId,
      type: type,
      qrNonce: qrNonce,
      deviceId: deviceId,
      location: location,
    );
    
    state = result.fold(
      (failure) => AsyncValue.error(failure, StackTrace.current),
      (record) {
        // Refresh attendance list
        ref.invalidate(userAttendanceProvider(employeeId));
        return AsyncValue.data(record);
      },
    );
  }
}
```

```dart
// File: lib/features/attendance/presentation/screens/attendance_scanner_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import '../providers/attendance_providers.dart';
import '../widgets/qr_scanner_overlay.dart';

class AttendanceScannerScreen extends ConsumerStatefulWidget {
  const AttendanceScannerScreen({super.key});

  @override
  ConsumerState<AttendanceScannerScreen> createState() => 
      _AttendanceScannerScreenState();
}

class _AttendanceScannerScreenState 
    extends ConsumerState<AttendanceScannerScreen> {
  MobileScannerController? _controller;
  bool _hasScanned = false;
  
  @override
  void initState() {
    super.initState();
    _controller = MobileScannerController(
      detectionSpeed: DetectionSpeed.normal,
      facing: CameraFacing.back,
    );
  }
  
  @override
  void dispose() {
    _controller?.dispose();
    super.dispose();
  }
  
  void _onDetect(BarcodeCapture capture) {
    if (_hasScanned) return;
    
    final barcodes = capture.barcodes;
    if (barcodes.isEmpty) return;
    
    final barcode = barcodes.first;
    final rawValue = barcode.rawValue;
    
    if (rawValue == null) return;
    
    setState(() => _hasScanned = true);
    
    // Process the QR code
    _processQrCode(rawValue);
  }
  
  Future<void> _processQrCode(String qrData) async {
    // Implementation...
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Scan Attendance QR'),
      ),
      body: Column(
        children: [
          Expanded(
            child: MobileScanner(
              controller: _controller,
              onDetect: _onDetect,
              overlay: const QrScannerOverlay(),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text(
              'Point your camera at the attendance QR code',
              style: Theme.of(context).textTheme.titleMedium,
              textAlign: TextAlign.center,
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          await _controller?.toggleTorch();
          setState(() {});
        },
        child: ValueListenableBuilder(
          valueListenable: _controller?.torchState ?? ValueNotifier(TorchState.off),
          builder: (context, state, child) {
            return Icon(
              state == TorchState.on ? Icons.flash_off : Icons.flash_on,
            );
          },
        ),
      ),
    );
  }
}
```

## Dependency Injection

Dependency injection follows the vertical slice pattern with feature-specific modules:

```dart
// File: lib/features/attendance/di/attendance_module.dart
import 'package:injectable/injectable.dart';
import '../data/datasources/attendance_local_data_source.dart';
import '../data/datasources/attendance_remote_data_source.dart';
import '../data/repositories/attendance_repository_impl.dart';
import '../domain/repositories/attendance_repository.dart';
import '../domain/usecases/get_attendance_records.dart';
import '../domain/usecases/submit_attendance.dart';

@module
abstract class AttendanceModule {
  @lazySingleton
  AttendanceLocalDataSource provideLocalDataSource(Database database) => 
      AttendanceLocalDataSourceImpl(database);
  
  @lazySingleton
  AttendanceRemoteDataSource provideRemoteDataSource(ApiClient apiClient) => 
      AttendanceRemoteDataSourceImpl(apiClient);
  
  @lazySingleton
  AttendanceRepository provideRepository(
    AttendanceLocalDataSource localDataSource,
    AttendanceRemoteDataSource remoteDataSource,
    NetworkInfo networkInfo,
  ) => 
      AttendanceRepositoryImpl(
        localDataSource,
        remoteDataSource,
        networkInfo,
      );
  
  @injectable
  GetAttendanceRecords provideGetAttendanceRecords(
    AttendanceRepository repository,
  ) => 
      GetAttendanceRecords(repository);
  
  @injectable
  SubmitAttendance provideSubmitAttendance(
    AttendanceRepository repository,
  ) => 
      SubmitAttendance(repository);
}
```

## Business Rules for MVSA

### Feature Independence
- Each feature should be independent and isolated from other features
- Cross-feature communication should be minimal and well-defined
- Features should not directly access other features' internal implementation
- Common utilities and patterns should be extracted to the core layer

### Layer Responsibilities
- **Domain Layer**: Pure business logic, no framework dependencies
- **Data Layer**: Implementations of repositories and data sources
- **Presentation Layer**: UI components and state management

### Dependency Flow
- Dependencies flow inward (presentation → domain ← data)
- Domain layer has no dependencies on data or presentation layers
- Data layer depends on domain interfaces (repositories)
- Presentation layer depends on domain entities and use cases

### Feature Testing
- Each feature must have comprehensive tests across all layers
- Domain layer tests must verify business rules and invariants
- Data layer tests must verify offline-first behavior
- Presentation layer tests must verify UI components and state

## Testing Approach

```dart
// File: test/features/attendance/domain/usecases/submit_attendance_test.dart
import 'package:dartz/dartz.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:hr_connect/core/error/failures.dart';
import 'package:hr_connect/features/attendance/domain/entities/attendance_record.dart';
import 'package:hr_connect/features/attendance/domain/repositories/attendance_repository.dart';
import 'package:hr_connect/features/attendance/domain/usecases/submit_attendance.dart';

class MockAttendanceRepository extends Mock implements AttendanceRepository {}

void main() {
  late SubmitAttendance usecase;
  late MockAttendanceRepository mockRepository;

  setUp(() {
    mockRepository = MockAttendanceRepository();
    usecase = SubmitAttendance(mockRepository);
  });

  const tEmployeeId = 'employee-123';
  const tBranchId = 'branch-456';
  const tQrNonce = 'nonce-789';
  const tType = AttendanceType.checkIn;
  final tRecord = AttendanceRecord(
    id: 'record-123',
    employeeId: tEmployeeId,
    timestamp: DateTime.now(),
    type: tType,
    status: AttendanceStatus.onTime,
  );

  test('should submit attendance through the repository', () async {
    // arrange
    when(mockRepository.submitAttendance(
      employeeId: anyNamed('employeeId'),
      branchId: anyNamed('branchId'),
      type: anyNamed('type'),
      qrNonce: anyNamed('qrNonce'),
      deviceId: anyNamed('deviceId'),
      location: anyNamed('location'),
    )).thenAnswer((_) async => Right(tRecord));

    // act
    final result = await usecase(
      employeeId: tEmployeeId,
      branchId: tBranchId,
      type: tType,
      qrNonce: tQrNonce,
    );

    // assert
    expect(result, Right(tRecord));
    verify(mockRepository.submitAttendance(
      employeeId: tEmployeeId,
      branchId: tBranchId,
      type: tType,
      qrNonce: tQrNonce,
      deviceId: null,
      location: null,
    ));
    verifyNoMoreInteractions(mockRepository);
  });

  test('should return failure when repository fails', () async {
    // arrange
    final tFailure = ServerFailure('Server error');
    when(mockRepository.submitAttendance(
      employeeId: anyNamed('employeeId'),
      branchId: anyNamed('branchId'),
      type: anyNamed('type'),
      qrNonce: anyNamed('qrNonce'),
      deviceId: anyNamed('deviceId'),
      location: anyNamed('location'),
    )).thenAnswer((_) async => Left(tFailure));

    // act
    final result = await usecase(
      employeeId: tEmployeeId,
      branchId: tBranchId,
      type: tType,
      qrNonce: tQrNonce,
    );

    // assert
    expect(result, Left(tFailure));
  });
}
```

## Implementation Process

The recommended process for implementing a new feature:

1. **Define Feature Requirements**
   - Clearly identify the business capability
   - Define domain entities and use cases
   - Document business rules and constraints

2. **Create Domain Layer**
   - Define entities, value objects, and repository interfaces
   - Implement use cases that encapsulate business rules
   - Write comprehensive tests for the domain layer

3. **Implement Data Layer**
   - Create data models and mapping functions
   - Implement local and remote data sources
   - Create repository implementations with offline-first approach
   - Test data layer with various connectivity scenarios

4. **Build Presentation Layer**
   - Define state management for the feature
   - Create UI components and screens
   - Connect UI to domain use cases
   - Implement responsive layouts and optimistic updates
   - Test UI components with widget tests

5. **Wire Dependencies**
   - Create feature-specific dependency injection module
   - Register dependencies in the main injection configuration
   - Ensure proper scoping of dependencies

6. **Integration Testing**
   - Test complete feature slice end-to-end
   - Verify offline functionality and synchronization
   - Test with realistic data and scenarios

## Common Anti-Patterns to Avoid

1. **Feature Coupling**
   - Direct dependencies between features
   - Shared mutable state across features
   - Deep import paths that cross feature boundaries

2. **Layer Violations**
   - Domain layer depending on data or presentation layers
   - Business logic in the data or presentation layers
   - UI components accessing repositories directly

3. **Testability Issues**
   - Hard-coded dependencies that make testing difficult
   - Global state or singletons without proper abstraction
   - Complex UI logic without proper decomposition

4. **Repository Inconsistencies**
   - Inconsistent offline-first implementation
   - Missing error handling with Either type
   - Direct API calls bypassing repositories

5. **Excessive Abstraction**
   - Over-engineered interfaces with no clear benefit
   - Unnecessary indirection that complicates the code

   - Premature abstraction before patterns are clear